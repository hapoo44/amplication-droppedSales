/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateDroppedUserArgs } from "./CreateDroppedUserArgs";
import { UpdateDroppedUserArgs } from "./UpdateDroppedUserArgs";
import { DeleteDroppedUserArgs } from "./DeleteDroppedUserArgs";
import { DroppedUserFindManyArgs } from "./DroppedUserFindManyArgs";
import { DroppedUserFindUniqueArgs } from "./DroppedUserFindUniqueArgs";
import { DroppedUser } from "./DroppedUser";
import { ContactFile } from "../../contactFile/base/ContactFile";
import { Sale } from "../../sale/base/Sale";
import { DroppedUserService } from "../droppedUser.service";

@graphql.Resolver(() => DroppedUser)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DroppedUserResolverBase {
  constructor(
    protected readonly service: DroppedUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _droppedUsersMeta(
    @graphql.Args() args: DroppedUserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [DroppedUser])
  async droppedUsers(
    @graphql.Args() args: DroppedUserFindManyArgs
  ): Promise<DroppedUser[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => DroppedUser, { nullable: true })
  async droppedUser(
    @graphql.Args() args: DroppedUserFindUniqueArgs
  ): Promise<DroppedUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => DroppedUser)
  async createDroppedUser(
    @graphql.Args() args: CreateDroppedUserArgs
  ): Promise<DroppedUser> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        contactFile: args.data.contactFile
          ? {
              connect: args.data.contactFile,
            }
          : undefined,

        sales: args.data.sales
          ? {
              connect: args.data.sales,
            }
          : undefined,
      },
    });
  }

  @Public()
  @graphql.Mutation(() => DroppedUser)
  async updateDroppedUser(
    @graphql.Args() args: UpdateDroppedUserArgs
  ): Promise<DroppedUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          contactFile: args.data.contactFile
            ? {
                connect: args.data.contactFile,
              }
            : undefined,

          sales: args.data.sales
            ? {
                connect: args.data.sales,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => DroppedUser)
  async deleteDroppedUser(
    @graphql.Args() args: DeleteDroppedUserArgs
  ): Promise<DroppedUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => ContactFile, { nullable: true })
  async contactFile(
    @graphql.Parent() parent: DroppedUser
  ): Promise<ContactFile | null> {
    const result = await this.service.getContactFile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => Sale, { nullable: true })
  async sales(@graphql.Parent() parent: DroppedUser): Promise<Sale | null> {
    const result = await this.service.getSales(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
