datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime @default(now())
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     String[]
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model DroppedUser {
  bucket           String?
  contactFile      ContactFile?        @relation(fields: [contactFileId], references: [id])
  contactFileId    String?
  createdAt        DateTime            @default(now())
  createdBy        String?
  dropId           String?             @unique
  droppedDate      DateTime?
  filePath         String?
  firstName        String?
  id               String              @id @default(cuid())
  lastName         String?
  mobile           String?
  sequence         Int?
  sex              EnumDroppedUserSex?
  updatedAt        DateTime            @updatedAt
  updatedBy        String?
  utmCampaign      String?
  vcfString        String?
  weightDifference Float?
}

model Sale {
  createdAt DateTime  @default(now())
  createdBy String?
  dropId    String?   @unique
  id        String    @id @default(cuid())
  isCounted Boolean?
  saleDate  DateTime?
  updatedAt DateTime  @updatedAt
  updatedBy String?
}

model ContactFile {
  bucket                      String?       @unique
  createdAt                   DateTime      @default(now())
  createdBy                   String?
  droppedUsers                DroppedUser[]
  filePath                    String?
  fromDate                    DateTime?
  id                          String        @id @default(cuid())
  saleRepresentativeFirstName String?
  saleRepresentativeLastName  String?
  salesCount                  Int?
  sex                         String?
  toDate                      DateTime?
  updatedAt                   DateTime      @updatedAt
  updatedBy                   String?
  utmCampaign                 String?
  weightDifference            Float?
}

enum EnumDroppedUserSex {
  F
  M
}